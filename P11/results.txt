Full Credit
===========

Number of cores available to my test environment (in bash use ``nproc`` command): 1
Primes range for my machine (between 20 and 30 second runtime without threads): 

Without threads:

real	.094s
user	.076s
sys	.008s


With 2 threads:

real	
user	
sys	


With 3 threads:

real	
user	
sys	


With 4 threads:

real	
user	
sys	


With 5 threads:

real	
user	
sys	


With 6 threads:

real	
user	
sys	


With 7 threads:

real	
user	
sys	


With 8 threads:

real	
user	
sys	


With 16 threads:

real	
user	
sys	


With 32 threads:

real	
user	
sys	


With 64 threads:

real	
user	
sys	


QUESTION: After threading is added to threads.cpp, is the order of prime numbers found in primes_threads.txt the same or different than in primes.txt?  Why?



QUESTION: Does adding more threads continue to speed up the program? Do more threads ever slow down the program slightly?  Why or why not?

I was unable to do  the multithreading portion of the assignment but I can reasonably infer from the lectures and my own
knowledge that adding more thread does not continue speeding up the program and that it can even slow down the program if the threads
are not ran synchronously


QUESTION: Does adding more threads increase the "system load", or is it constant regardless of the number of threads?  Why?

I was unable to do the multithreading portion of this assignment but I can reasonably infer from the lectures and my own
knowledge that adding more threads can increase the system load if done incorrectly due to it making your CPU usage becoming higher

Bonus
=====

After "load balancing" your code as discussed in the PDF, rerun the test with the same number of threads as your test environment has cores. For example, on a 4-core machine, run your code with 4 threads and record the time below.

Number of cores: 

Load Balanced
-------------

real	
user	
sys	

NOT Load Balanced
-----------------

Copy the time for this number of cores from the Full Credit section:

real	
user	
sys	

QUESTION: What difference does a load balanced thread pool make in execution time?

I was unable to do the multithreading portion of this assignment but I can reasonably infer from the lecture and my own
knowledge that a load balanced thread pool will make an execution time shorter due to higher efficiency when it comes to distributing tasks to available servers


Extreme Bonus
=============

List the optimizations you applied to reduce the time needed to identify prime numbers.

* Optimization 1: 
* Optimization 2: 
* Optimization 3: 

Add additional bullet points as needed.
